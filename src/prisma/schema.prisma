generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart {
  id          Int           @id @default(autoincrement())
  id_user     Int           @unique(map: "unique_id_user")
  createAt    DateTime      @default(now()) @db.DateTime(0)
  updateAt    DateTime      @default(now()) @db.DateTime(0)
  user        user          @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "cart_user")
  cart_detail cart_detail[]

  @@index([id_user], map: "cart_user")
}

model cart_detail {
  id             Int            @id @default(autoincrement())
  id_cart        Int
  id_pro_detail  Int
  quantity       Int
  cart           cart           @relation(fields: [id_cart], references: [id], onDelete: Cascade, map: "cart_detail_cart")
  product_detail product_detail @relation(fields: [id_pro_detail], references: [id], onDelete: Cascade, map: "cart_detail_filter")

  @@index([id_cart], map: "cart_detail_cart")
  @@index([id_pro_detail], map: "cart_detail_filter")
}

model category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  createAt DateTime  @default(now()) @db.DateTime(0)
  updateAt DateTime  @db.DateTime(0)
  status   Int       @default(1)
  product  product[]
}

model feedback {
  id          Int       @id @default(autoincrement())
  id_user     Int
  id_product  Int
  id_order    Int
  rate        Int
  description String?   @db.Text
  img         String?   @db.Text
  createAt    DateTime? @default(now()) @db.DateTime(0)
  updateAt    DateTime? @db.DateTime(0)
  orders      orders    @relation(fields: [id_order], references: [id], onDelete: Cascade, map: "feedback_order")
  product     product   @relation(fields: [id_product], references: [id], onDelete: Cascade, map: "feedback_product")
  user        user      @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "feedback_user")

  @@index([id_order], map: "feedback_order")
  @@index([id_product], map: "feedback_product")
  @@index([id_user], map: "feedback_user")
}

model order_detail {
  id             Int            @id @default(autoincrement())
  id_order       Int
  id_filter      Int
  quantity       Int
  price          Int
  product_detail product_detail @relation(fields: [id_filter], references: [id], onDelete: Cascade, map: "details_fillter")
  orders         orders         @relation(fields: [id_order], references: [id], onDelete: Cascade, map: "details_orders")

  @@index([id_filter], map: "details_fillter")
  @@index([id_order], map: "details_orders")
}

model orders {
  id               Int            @id @default(autoincrement())
  id_user          Int
  fullname         String         @db.VarChar(255)
  phone            String         @db.VarChar(255)
  status           Int            @default(0)
  reason           String?        @db.Text
  orderDate        DateTime       @default(now()) @db.DateTime(0)
  shipping_address String         @db.VarChar(255)
  shipping_method  String         @db.Text
  payment_method   String         @default("1") @db.VarChar(255)
  total_amount     Int
  note             String?        @db.Text
  voucherValue     Int
  feedback         feedback[]
  order_detail     order_detail[]
  user             user           @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "order_user")

  @@index([id_user], map: "order_user")
}

model otp {
  id       Int      @id @default(autoincrement())
  otp      String   @db.VarChar(20)
  email    String   @db.VarChar(255)
  createAt DateTime @default(now()) @db.DateTime(0)
}

model producer {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  createAt DateTime? @default(now()) @db.DateTime(0)
  updateAt DateTime? @db.DateTime(0)
  status   Int?      @default(1)
  product  product[]
}

model product {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(255)
  description    String?          @db.Text
  information    String?          @db.Text
  priceRange     Int
  status         String?          @db.VarChar(255)
  img            String?          @db.VarChar(255)
  star           Float?           @default(5) @db.Float
  id_owner       Int?
  id_category    Int?
  createAt       DateTime?        @default(now()) @db.DateTime(0)
  updateAt       DateTime?        @default(now()) @db.DateTime(0)
  deleted        Int              @default(0)
  feedback       feedback[]
  producer       producer?        @relation(fields: [id_owner], references: [id], onDelete: Cascade, map: "pro_producer")
  category       category?        @relation(fields: [id_category], references: [id], onDelete: Cascade, map: "product_ibfk_2")
  product_detail product_detail[]

  @@index([id_owner], map: "pro_producer")
  @@index([id_category], map: "product_ibfk_2")
}

model product_detail {
  id           Int            @id @default(autoincrement())
  id_pro       Int
  color        String         @db.VarChar(255)
  size         String         @db.VarChar(255)
  quantity     Int
  img          String         @db.VarChar(255)
  price        Int
  deleted      Int            @default(0)
  cart_detail  cart_detail[]
  order_detail order_detail[]
  product      product        @relation(fields: [id_pro], references: [id], onDelete: Cascade, map: "product_detail_ibfk_1")

  @@index([id_pro], map: "filter_ibfk_1")
}

model user {
  id       Int        @id @default(autoincrement())
  email    String     @db.VarChar(255)
  password String     @db.VarChar(255)
  username String     @db.VarChar(255)
  avatar   String     @default("default.jpg") @db.VarChar(255)
  birthday DateTime?  @db.Date
  gender   Int?
  isAdmin  Int        @default(0)
  deleted  Int        @default(0)
  createAt DateTime   @default(now()) @db.DateTime(0)
  updateAt DateTime   @default(now()) @db.DateTime(0)
  cart     cart?
  feedback feedback[]
  orders   orders[]
}

model voucher {
  id          Int      @id @default(autoincrement())
  code        String   @db.VarChar(20)
  value       Int
  quantity    Int
  maxMoney    Float?
  expiredTime DateTime @db.DateTime(0)
  description String?  @db.Text
}
